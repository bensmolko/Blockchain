/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package blockchain;
import java.io.*;
import java.util.ArrayList;
import javax.swing.*;
import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;
import javafx.scene.layout.VBox;
import javafx.scene.control.*;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.nio.charset.StandardCharsets;
import java.lang.StringBuilder;
import javafx.application.Platform;
import javafx.scene.control.Slider;
import javafx.scene.control.ContextMenu;
import javafx.scene.control.MenuItem;
import javafx.scene.input.Clipboard;
import javafx.scene.input.ClipboardContent;



public class App extends Application{
    public ArrayList<Block> blockchain = new ArrayList<>();
    private Block genesis = new Block();
    private boolean invalidWarning = false;

    public static void main(String[] args) {
        
        launch(args);
    }

    @Override
    public void start(Stage primaryStage){
        blockchain.add(genesis);
        getMainMenu(primaryStage);
    }

    private void getMainMenu(Stage primaryStage){
        Button addBlock = new Button();
        addBlock.setText("Add To Blockchain");

        Button search = new Button();
        search.setText("Search With Hash Code");

        Button directory = new Button();
        directory.setText("See Hash Code Directory");

        VBox menu = new VBox(10);
        menu.getChildren().addAll(addBlock, search, directory);

        addBlock.setOnAction(event -> getFormScreen(primaryStage));
        search.setOnAction(event -> getSearchScreen(primaryStage));
        directory.setOnAction(event -> getDirectoryScreen(primaryStage));

        primaryStage.setScene(new Scene(menu, 500, 400));
        primaryStage.show();
        
    }

    private void getFormScreen(Stage primaryStage){
        ArrayList<Transaction> newTransactions = new ArrayList<Transaction>();
        Button search = new Button();
        search.setText("Get Block From Blockchain");

        Label sender = new Label("Sender");
        TextField send = new TextField();
        Label amount = new Label("Amount");
        DoubleField amt = new DoubleField();
        Label reciever = new Label("Reciever");
        TextField rec = new TextField();

        Button add = new Button();
        add.setText("Add");
        

        Label difficulty = new Label("Set Difficulty");
        Slider diff = new Slider(4, 10, 4);
        diff.setShowTickMarks(true);
        diff.setShowTickLabels(true);
        diff.setMajorTickUnit(1f);
        diff.setMinorTickCount(0);
        diff.setSnapToTicks(true);

        Button push = new Button();
        push.setText("Push To Blockchain");

        Button menu = new Button();
        menu.setText("Return To Menu");

        VBox formScreen = new VBox(10);
        formScreen.getChildren().addAll(sender, send, amount, amt, reciever, rec, add, difficulty, diff, push, menu);
        
        add.setOnAction(event -> addTransaction(send, amt, rec, formScreen, newTransactions));
        push.setOnAction(event -> pushToBlockchain(primaryStage, newTransactions, diff));
        menu.setOnAction(event -> getMainMenu(primaryStage));

        primaryStage.setScene(new Scene(formScreen, 500, 400));
    }

    private void addTransaction(TextField send, DoubleField amt, TextField rec, VBox formScreen, ArrayList<Transaction> newTransactions){
        Label warning = new Label("Invalid Amount");
        try{
            if(invalidWarning){
                formScreen.getChildren().remove(0);
            }
            String sendVal = send.getText();
            double amtVal = amt.getValue();
            String recVal = rec.getText();
            Transaction newTransaction = new Transaction(sendVal, amtVal, recVal);
            newTransactions.add(newTransaction);
            send.clear();
            amt.clear();
            rec.clear();
            System.out.println("testing...");
            invalidWarning = false;
        }catch(NumberFormatException e){
            amt.clear();
            formScreen.getChildren().add(0, warning);
            invalidWarning = true;
        }
    }

    private void pushToBlockchain(Stage primaryStage, ArrayList<Transaction> newTransactions, Slider diff){
        VBox pushScreen = new VBox(10);

        Scene previousScene = primaryStage.getScene();

        primaryStage.setScene(new Scene(pushScreen, 500, 400));
        primaryStage.show();    

        Block newBlock = new Block(getHashCode(blockchain.get(blockchain.size()-1)), newTransactions);
                
        Platform.runLater(()->{
            mine((int) diff.getValue(), newBlock);
                    
            Label complete = new Label("Mining Complete. Hash Code:");
            Label hashCode = new Label(getHashCode(newBlock));
            ContextMenu contextMenu = new ContextMenu();
            MenuItem copy = new MenuItem("Copy To Clipboard");
            contextMenu.getItems().add(copy);

            hashCode.setContextMenu(contextMenu);

            copy.setOnAction(event -> {
                Clipboard clipboard = Clipboard.getSystemClipboard();
                ClipboardContent content = new ClipboardContent();
                content.putString(hashCode.getText());
                clipboard.setContent(content);

            });
            Label nonce = new Label("Nonce: "+newBlock.getNonce());

            Button back = new Button();
            back.setText("Add Another Block");

            Button menu = new Button();
            menu.setText("Return To Menu");

            pushScreen.getChildren().addAll(complete, hashCode, nonce, back, menu);
                    
            back.setOnAction(new EventHandler<ActionEvent>(){
                @Override
                public void handle(ActionEvent event){
                    primaryStage.setScene(previousScene);
                    primaryStage.show();
                }
            });
            menu.setOnAction(event -> getMainMenu(primaryStage));

            
        });
    }

    private void getSearchScreen(Stage primaryStage){
        VBox searchScreen = new VBox(10);
        
        Label searchLabel = new Label("Enter Hash Code");
        TextField searchBar = new TextField();
        
        Button search = new Button();
        search.setText("Search");

        Button menu = new Button();
        menu.setText("Return To Menu");

        searchScreen.getChildren().addAll(searchLabel, searchBar, search, menu);

        search.setOnAction(event -> getBlockScreen(primaryStage, searchBar));
        menu.setOnAction(event -> getMainMenu(primaryStage));
        
        primaryStage.setScene(new Scene(searchScreen, 500, 400));
        primaryStage.show();   
        
    }

    private Block search(String hashCode){
        for(Block block : blockchain){
            System.out.println(getHashCode(block));
            if(getHashCode(block).equals(hashCode)){
                return block;
            }
        }
        return null;
    }

    private void getBlockScreen(Stage primaryStage, TextField hashCode){
        Block block = search(hashCode.getText());
        
        VBox blockScreen = new VBox(10);

        if(!(block==null)){
            for(Transaction t : block.getTransactions()){
                String transaction = t.getPaid()+"-"+ Double.toString(t.getAmount()).toString()+"-"+t.getRecieved()+"-"+t.getDateTime().toString();
                Label newTransaction = new Label(transaction);
                blockScreen.getChildren().add(newTransaction);
            }
        }
        else{
            System.out.println(block);
            Label warning = new Label("Hash Code Not Found");
            blockScreen.getChildren().add(warning);
        }

        Button menu = new Button();
        menu.setText("Return To Menu");

        blockScreen.getChildren().add(menu);

        menu.setOnAction(event -> getMainMenu(primaryStage));

        primaryStage.setScene(new Scene(blockScreen, 500, 400));
        primaryStage.show();   


    }

    private void getDirectoryScreen(Stage primaryStage){
        VBox directoryScreen = new VBox(10);

        for(Block block : blockchain){
            Label hashCode = new Label(getHashCode(block));
            ContextMenu contextMenu = new ContextMenu();
            MenuItem copy = new MenuItem("Copy To Clipboard");
            contextMenu.getItems().add(copy);

            hashCode.setContextMenu(contextMenu);

            copy.setOnAction(event -> {
                Clipboard clipboard = Clipboard.getSystemClipboard();
                ClipboardContent content = new ClipboardContent();
                content.putString(hashCode.getText());
                clipboard.setContent(content);

            });
            directoryScreen.getChildren().add(hashCode);
        }

        Button menu = new Button();
        menu.setText("Return To Menu");

        directoryScreen.getChildren().add(menu);

        menu.setOnAction(event -> getMainMenu(primaryStage));

        primaryStage.setScene(new Scene(directoryScreen, 500, 400));
        primaryStage.show();
    }

    private void mine(int difficulty, Block block){
        while(!valid(difficulty, block)){
            block.changeHash();
        }
        blockchain.add(block);
        System.out.println("Mining Complete");
        System.out.println(getHashCode(block));
        System.out.println(blockchain.size());
    }

    private boolean valid(int difficulty, Block block){
        
        String hashString = getHashCode(block);

        int zeros = 0;
        for(int i=0; i<hashString.length(); i++){
            String charString = "" + hashString.charAt(i);
            if(charString.equals("0")){
                zeros++;
                if(zeros==difficulty){
                    return true;
                }
            }
            else{
                return false;
            }
        }
        return false;

    }

    private String getHashCode(Block block){
        try{
            MessageDigest msgDigest = MessageDigest.getInstance("SHA-256");

            ArrayList<Transaction> trans = block.getTransactions();
    
            String blockString = Integer.toString(block.getNonce())+block.getPrev();
    
            for(int i=0; i<trans.size(); i++){
                Transaction idx = trans.get(i);
                blockString+=idx.getPaid();
                blockString+=Double.toString(idx.getAmount());
                blockString+=idx.getRecieved();
                blockString+=idx.getDateTime().toString();
            }
            
            byte[] bytes = blockString.getBytes(StandardCharsets.UTF_8);

            msgDigest.update(bytes);

            byte[] hashBytes = msgDigest.digest();
    
            StringBuilder hashString = new StringBuilder();
            for (byte b : hashBytes) {
                String hex = String.format("%02x", b);
                hashString.append(hex);
            }

            return hashString.toString();
            
        }catch(NoSuchAlgorithmException e){
            System.out.println("No Such Algorithm");
        }

        return "";
    }

}
